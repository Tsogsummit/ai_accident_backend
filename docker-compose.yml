version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: accident_postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-accident_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - accident_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: accident_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - accident_network

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: accident_api_gateway
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      JWT_SECRET: ${JWT_SECRET}
      USER_SERVICE_URL: http://user-service:3001
      ACCIDENT_SERVICE_URL: http://accident-service:3002
      VIDEO_SERVICE_URL: http://video-service:3003
      AI_SERVICE_URL: http://ai-service:3004
      NOTIFICATION_SERVICE_URL: http://notification-service:3005
      MAP_SERVICE_URL: http://map-service:3006
      REPORT_SERVICE_URL: http://report-service:3007
      CAMERA_SERVICE_URL: http://camera-service:3008
    depends_on:
      - postgres
      - redis
    networks:
      - accident_network
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: accident_user_service
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-accident_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - postgres
      - redis
    networks:
      - accident_network
    restart: unless-stopped

  # Accident Service
  accident-service:
    build:
      context: ./services/accident-service
      dockerfile: Dockerfile
    container_name: accident_accident_service
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: production
      PORT: 3002
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-accident_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - postgres
      - redis
    networks:
      - accident_network
    restart: unless-stopped

  # Video Service
  video-service:
    build:
      context: ./services/video-service
      dockerfile: Dockerfile
    container_name: accident_video_service
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: production
      PORT: 3003
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-accident_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      GCP_PROJECT_ID: ${GCP_PROJECT_ID}
      GCS_BUCKET_NAME: ${GCS_BUCKET_NAME}
      GCP_KEY_FILE: /app/gcp-key.json
    volumes:
      - ./gcp-key.json:/app/gcp-key.json:ro
    depends_on:
      - postgres
    networks:
      - accident_network
    restart: unless-stopped

  # AI Detection Service
  ai-service:
    build:
      context: ./services/ai-detection-service
      dockerfile: Dockerfile
    container_name: accident_ai_service
    ports:
      - "3004:3004"
    environment:
      PORT: 3004
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-accident_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      GCP_PROJECT_ID: ${GCP_PROJECT_ID}
      GCS_BUCKET_NAME: ${GCS_BUCKET_NAME}
      MODEL_PATH: /app/models/yolov8n.pt
    volumes:
      - ./models:/app/models:ro
      - ./gcp-key.json:/app/gcp-key.json:ro
    depends_on:
      - postgres
    networks:
      - accident_network
    restart: unless-stopped
    # GPU support (optional)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: accident_notification_service
    ports:
      - "3005:3005"
    environment:
      NODE_ENV: production
      PORT: 3005
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-accident_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      FCM_SERVER_KEY: ${FCM_SERVER_KEY}
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
    depends_on:
      - postgres
      - redis
    networks:
      - accident_network
    restart: unless-stopped

  # Map Service
  map-service:
    build:
      context: ./services/map-service
      dockerfile: Dockerfile
    container_name: accident_map_service
    ports:
      - "3006:3006"
    environment:
      NODE_ENV: production
      PORT: 3006
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-accident_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - accident_network
    restart: unless-stopped

  # Report Service
  report-service:
    build:
      context: ./services/report-service
      dockerfile: Dockerfile
    container_name: accident_report_service
    ports:
      - "3007:3007"
    environment:
      NODE_ENV: production
      PORT: 3007
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-accident_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - postgres
      - redis
    networks:
      - accident_network
    restart: unless-stopped

  # Camera Service
  camera-service:
    build:
      context: ./services/camera-service
      dockerfile: Dockerfile
    container_name: accident_camera_service
    ports:
      - "3008:3008"
    environment:
      NODE_ENV: production
      PORT: 3008
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-accident_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      GCP_PROJECT_ID: ${GCP_PROJECT_ID}
      GCS_BUCKET_NAME: ${GCS_BUCKET_NAME}
      GCP_KEY_FILE: /app/gcp-key.json
    volumes:
      - ./gcp-key.json:/app/gcp-key.json:ro
    depends_on:
      - postgres
    networks:
      - accident_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  accident_network:
    driver: bridge