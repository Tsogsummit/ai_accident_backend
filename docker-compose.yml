version: '3.8'

# ==========================================
# ACCIDENT DETECTION SYSTEM
# Docker Compose Configuration
# ==========================================

services:
  # ==========================================
  # DATABASE SERVICES
  # ==========================================
  
  postgres:
    image: postgis/postgis:15-3.3
    container_name: accident_postgres
    environment:
      POSTGRES_DB: accident_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - accident_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: accident_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - accident_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # ==========================================
  # API GATEWAY
  # ==========================================
  
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: accident_api_gateway
    ports:
      - "3000:3000"
    environment:
      PORT: 3000
      NODE_ENV: ${NODE_ENV:-development}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET}
      
      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-*}
      
      # Service URLs
      USER_SERVICE_URL: http://user-service:3001
      ACCIDENT_SERVICE_URL: http://accident-service:3002
      VIDEO_SERVICE_URL: http://video-service:3003
      AI_SERVICE_URL: http://ai-detection-service:3004
      NOTIFICATION_SERVICE_URL: http://notification-service:3005
      MAP_SERVICE_URL: http://map-service:3006
      REPORT_SERVICE_URL: http://report-service:3007
      CAMERA_SERVICE_URL: http://camera-service:3008
      ADMIN_SERVICE_URL: http://admin-service:3009
    networks:
      - accident_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # MICROSERVICES
  # ==========================================

  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: accident_user_service
    ports:
      - "3001:3001"
    environment:
      PORT: 3001
      NODE_ENV: ${NODE_ENV:-development}
      
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: accident_db
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-30d}
    networks:
      - accident_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  accident-service:
    build:
      context: ./services/accident-service
      dockerfile: Dockerfile
    container_name: accident_accident_service
    ports:
      - "3002:3002"
    environment:
      PORT: 3002
      NODE_ENV: ${NODE_ENV:-development}
      
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: accident_db
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET}
      
      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-*}
    networks:
      - accident_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  video-service:
    build:
      context: ./services/video-service
      dockerfile: Dockerfile
    container_name: accident_video_service
    ports:
      - "3003:3003"
    environment:
      PORT: 3003
      NODE_ENV: ${NODE_ENV:-development}
      
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: accident_db
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      
      # Google Cloud (optional)
      GCP_PROJECT_ID: ${GCP_PROJECT_ID:-}
      GCP_KEY_FILE: ${GCP_KEY_FILE:-}
      GCS_BUCKET_NAME: ${GCS_BUCKET_NAME:-accident-videos}
      # GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS:-}
      
      # Upload limits
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-52428800}
    volumes:
      - video_uploads:/app/uploads
      - ${GCP_KEY_FILE:-./gcp-key.json}:/app/gcp-key.json:ro
    networks:
      - accident_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  ai-detection-service:
    build:
      context: ./services/ai-detection-service
      dockerfile: Dockerfile
    container_name: accident_ai_service
    ports:
      - "3004:3004"
    environment:
      PORT: 3004
      
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: accident_db
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      
      # Model
      MODEL_PATH: /app/models/yolov8n.pt
      
      # AI Config
      AI_CONFIDENCE_THRESHOLD: ${AI_CONFIDENCE_THRESHOLD:-0.5}
      AI_MIN_ACCIDENT_FRAME_RATIO: ${AI_MIN_ACCIDENT_FRAME_RATIO:-0.3}
      AI_FRAME_INTERVAL: ${AI_FRAME_INTERVAL:-2}
      
      # Google Cloud (optional)
      GOOGLE_APPLICATION_CREDENTIALS: ${FIREBASE_CREDENTIALS:-}
      GCP_PROJECT_ID: ${GCP_PROJECT_ID:-}
      GCS_BUCKET_NAME: ${GCS_BUCKET_NAME:-accident-videos}
      PUBSUB_TOPIC: ${PUBSUB_TOPIC:-video-processing}
    volumes:
      - ai_models:/app/models
      - ${GCP_KEY_FILE:-./gcp-key.json}:/app/gcp-key.json:ro
      - ./firebase.json:/app/firebase.json:ro
    networks:
      - accident_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: accident_notification_service
    ports:
      - "3005:3005"
    environment:
      PORT: 3005
      NODE_ENV: ${NODE_ENV:-development}
      
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: accident_db
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      
      # Firebase (optional)
      FIREBASE_CREDENTIALS: ${FIREBASE_CREDENTIALS:-}
      FIREBASE_DATABASE_URL: ${FIREBASE_DATABASE_URL:-}
      
      # Notification Config
      NOTIFICATION_DEFAULT_RADIUS: ${NOTIFICATION_DEFAULT_RADIUS:-5000}
      NOTIFICATION_BATCH_SIZE: ${NOTIFICATION_BATCH_SIZE:-100}
      
      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-*}
    volumes:
      - ${FIREBASE_CREDENTIALS:-./firebase.json}:/app/firebase.json:ro
    networks:
      - accident_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  map-service:
    build:
      context: ./services/map-service
      dockerfile: Dockerfile
    container_name: accident_map_service
    ports:
      - "3006:3006"
    environment:
      PORT: 3006
      NODE_ENV: ${NODE_ENV:-development}
      
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: accident_db
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      
      # Google Maps API
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY:-}
      
      # Cache TTL
      CACHE_TTL_MAP_MARKERS: ${CACHE_TTL_MAP_MARKERS:-120}
    networks:
      - accident_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  report-service:
    build:
      context: ./services/report-service
      dockerfile: Dockerfile
    container_name: accident_report_service
    ports:
      - "3007:3007"
    environment:
      PORT: 3007
      NODE_ENV: ${NODE_ENV:-development}
      
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: accident_db
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    networks:
      - accident_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  camera-service:
    build:
      context: ./services/camera-service
      dockerfile: Dockerfile
    container_name: accident_camera_service
    ports:
      - "3008:3008"
    environment:
      PORT: 3008
      NODE_ENV: ${NODE_ENV:-development}
      
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: accident_db
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      
      # Camera settings
      STREAM_INTERVAL: ${CAMERA_STREAM_INTERVAL:-300}
      STREAM_DURATION: ${CAMERA_STREAM_DURATION:-30}
      HEALTH_CHECK_INTERVAL: ${CAMERA_HEALTH_CHECK_INTERVAL:-60000}
      TEMP_DIR: /tmp
      
      # Google Cloud (optional)
      GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS:-}
      GCP_PROJECT_ID: ${GCP_PROJECT_ID:-}
      GCS_BUCKET_NAME: ${GCS_BUCKET_NAME:-accident-videos}
      PUBSUB_TOPIC: ${PUBSUB_TOPIC:-video-processing}
    volumes:
      - camera_temp:/tmp
      - ${GCP_KEY_FILE:-./gcp-key.json}:/app/gcp-key.json:ro
    networks:
      - accident_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  admin-service:
    build: 
      context: ./services/admin-service
      dockerfile: Dockerfile
    container_name: accident_admin_service
    ports:
      - "3009:3009"
    environment:
      PORT: 3009
      NODE_ENV: ${NODE_ENV:-development}
      
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: accident_db
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET}
      
      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-*}
    networks:
      - accident_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ==========================================
# NETWORKS
# ==========================================

networks:
  accident_network:
    driver: bridge
    name: accident_network

# ==========================================
# VOLUMES
# ==========================================

volumes:
  postgres_data:
    name: accident_postgres_data
  redis_data:
    name: accident_redis_data
  video_uploads:
    name: accident_video_uploads
  ai_models:
    name: accident_ai_models
  camera_temp:
    name: accident_camera_temp