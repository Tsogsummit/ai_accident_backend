version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgis/postgis:15-3.4-alpine
    container_name: accident_postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-accident_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - accident_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: accident_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - accident_network
    # ✅ FIXED: Redis нууц үгтэй
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-changeme123}
      --appendonly yes
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme123}
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-changeme123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: accident_api_gateway
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      JWT_SECRET: ${JWT_SECRET}
      USER_SERVICE_URL: http://user-service:3001
      ACCIDENT_SERVICE_URL: http://accident-service:3002
      VIDEO_SERVICE_URL: http://video-service:3003
      AI_SERVICE_URL: http://ai-service:3004
      NOTIFICATION_SERVICE_URL: http://notification-service:3005
      MAP_SERVICE_URL: http://map-service:3006
      REPORT_SERVICE_URL: http://report-service:3007
      CAMERA_SERVICE_URL: http://camera-service:3008
      ADMIN_SERVICE_URL: http://admin-service:3009
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-*}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_started
      accident-service:
        condition: service_started
    networks:
      - accident_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: accident_user_service
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-accident_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme123}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - accident_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Accident Service
  accident-service:
    build:
      context: ./services/accident-service
      dockerfile: Dockerfile
    container_name: accident_accident_service
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3002
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-accident_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme123}
      JWT_SECRET: ${JWT_SECRET}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-*}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - accident_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Video Service
  video-service:
    build:
      context: ./services/video-service
      dockerfile: Dockerfile
    container_name: accident_video_service
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3003
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-accident_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      GCP_PROJECT_ID: ${GCP_PROJECT_ID}
      GCS_BUCKET_NAME: ${GCS_BUCKET_NAME}
      GCP_KEY_FILE: /app/gcp-key.json
      GOOGLE_APPLICATION_CREDENTIALS: /app/gcp-key.json
    volumes:
      - ./gcp-key.json:/app/gcp-key.json:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - accident_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AI Detection Service
  ai-service:
    build:
      context: ./services/ai-detection-service
      dockerfile: Dockerfile
    container_name: accident_ai_service
    ports:
      - "3004:3004"
    environment:
      PORT: 3004
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-accident_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      GCP_PROJECT_ID: ${GCP_PROJECT_ID}
      GCS_BUCKET_NAME: ${GCS_BUCKET_NAME}
      MODEL_PATH: /app/models/yolov8n.pt
      YOLO_CONFIG_DIR: /tmp/Ultralytics
      GOOGLE_APPLICATION_CREDENTIALS: /app/gcp-key.json
    volumes:
      - ./models:/app/models:ro
      - ./gcp-key.json:/app/gcp-key.json:ro
      - ./tmp_ultralytics:/tmp/Ultralytics
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - accident_network
    restart: unless-stopped
    platform: linux/amd64
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: accident_notification_service
    ports:
      - "3005:3005"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3005
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-accident_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme123}
      FIREBASE_CREDENTIALS: /app/firebase.json
      FIREBASE_DATABASE_URL: ${FIREBASE_DATABASE_URL}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-*}
    volumes:
      - ./firebase.json:/app/firebase.json:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - accident_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Map Service
  map-service:
    build:
      context: ./services/map-service
      dockerfile: Dockerfile
    container_name: accident_map_service
    ports:
      - "3006:3006"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3006
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-accident_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme123}
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - accident_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Report Service
  report-service:
    build:
      context: ./services/report-service
      dockerfile: Dockerfile
    container_name: accident_report_service
    ports:
      - "3007:3007"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3007
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-accident_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme123}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - accident_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Camera Service
  camera-service:
    build:
      context: ./services/camera-service
      dockerfile: Dockerfile
    container_name: accident_camera_service
    ports:
      - "3008:3008"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3008
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-accident_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      GCP_PROJECT_ID: ${GCP_PROJECT_ID}
      GCS_BUCKET_NAME: ${GCS_BUCKET_NAME}
      GCP_KEY_FILE: /app/gcp-key.json
      GOOGLE_APPLICATION_CREDENTIALS: /app/gcp-key.json
      CAMERA_STREAM_INTERVAL: ${CAMERA_STREAM_INTERVAL:-300000}
      CAMERA_STREAM_DURATION: ${CAMERA_STREAM_DURATION:-30}
      CAMERA_HEALTH_CHECK_INTERVAL: ${CAMERA_HEALTH_CHECK_INTERVAL:-60000}
    volumes:
      - ./gcp-key.json:/app/gcp-key.json:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - accident_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ✅ NEW: Admin Dashboard Service
  admin-service:
    build:
      context: ./services/admin-service
      dockerfile: Dockerfile
    container_name: accident_admin_service
    ports:
      - "3009:3009"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3009
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-accident_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme123}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - accident_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  accident_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16